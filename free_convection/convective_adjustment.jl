using Printf
using LinearAlgebra

using DifferentialEquations
using Plots

ENV["GKSwstype"] = "100"

""" Returns a discrete 1D derivative operator for cell center to cell (f)aces. """
function D·∂†(N, Œî)
    D = zeros(N, N+1)
    for k in 1:N
        D[k, k]   = -1.0
        D[k, k+1] =  1.0
    end
    D = 1/Œî * D
    return D
end

""" Returns a discrete 1D derivative operator for cell faces to cell (c)enters. """
function D·∂ú(N, Œî)
    D = zeros(N+1, N)
    for k in 2:N
        D[k, k-1] = -1.0
        D[k, k]   =  1.0
    end
    D = 1/Œî * D
    return D
end

function ‚Ñë·∂†(N, Œî)
    ‚Ñë = zeros(N, N+1)
    for k in 1:N
        ‚Ñë[k, k]   = 0.5
        ‚Ñë[k, k+1] = 0.5
    end
    return ‚Ñë
end

function ‚Ñë·∂ú(N, Œî)
    ‚Ñë = zeros(N+1, N)
    for k in 2:N
        ‚Ñë[k, k-1] = 0.5
        ‚Ñë[k, k]   = 0.5
    end
    return ‚Ñë
end

function convective_adjustment(T, p, t)
    N, Œ∫, Q‚Çõ = p.N, p.Œ∫, p.Q‚Çõ
    Dz·∂†, Dz·∂ú = p.Dz·∂†, p.Dz·∂ú

    ‚àÇT‚àÇz = Dz·∂ú * T

    wT = @. min(0, Œ∫ * ‚àÇT‚àÇz)
    wT[N+1] += Q‚Çõ

    return Dz·∂† * wT
end

function surface_flux(T, p, t)
    N, Q‚Çõ, Dz·∂† = p.N, p.Q‚Çõ, p.Dz·∂†

    wT = zeros(N+1)
    wT[N+1] += Q‚Çõ

    return Dz·∂† * wT
end

N = 32
L = 100
Œî = L/N
z = range(Œî/2, L-Œî/2, length=N)

Dz·∂† = D·∂†(N, Œî)
Dz·∂ú = D·∂ú(N, Œî)
‚Ñëz·∂† = ‚Ñë·∂†(N, Œî)
‚Ñëz·∂ú = ‚Ñë·∂ú(N, Œî)

œÅ‚ÇÄ = 1027
c‚Çö = 4000
Q  = -100 / (œÅ‚ÇÄ * c‚Çö)

T‚ÇÄ = [19 + z‚Çñ/L for z‚Çñ in z]

day = 86400
tspan = (0.0, 8day)
tsave = range(tspan...; length=101)

params = (N=N, Œ∫=1000, Q‚Çõ=Q, Dz·∂†=Dz·∂†, Dz·∂ú=D·∂ú(N, Œî))

prob = ODEProblem(convective_adjustment, T‚ÇÄ, tspan, params)
@time sol = solve(prob, Rodas5(), reltol=1e-5, saveat=tsave, progress=true)

anim = @animate for n in 1:length(sol)
    @info "Frame $n/$(length(sol))"
    time_str = @sprintf("%.2f days", sol.t[n] / day)

    plot(sol[n], z, linewidth=2, xlim=(19, 20), ylim=(0, 100),
         xlabel="Temperature (¬∞C)", ylabel="Depth z (meters)",
         title="Convective adjustment: $time_str", legend=:bottomright, show=false)
end

mp4(anim, "convective_adjustment_stiff.mp4", fps=15)

function convective_adjustment!(integrator)
    T = integrator.u
    ‚àÇT‚àÇz = Dz·∂ú * T
    ‚Ñë‚àÇT‚àÇz = ‚Ñëz·∂† * ‚àÇT‚àÇz

    Œ∫ = zeros(N)
    for j in 1:N
        Œ∫[j] = ‚Ñë‚àÇT‚àÇz[j] < 0 ? K : 0
    end

    ld = [-Œît/Œîz^2 * Œ∫[j]   for j in 2:N]
    ud = [-Œît/Œîz^2 * Œ∫[j+1] for j in 1:N-1]

    d = zeros(N)
    for j in 1:N-1
        d[j] = 1 + Œît/Œîz^2 * (Œ∫[j] + Œ∫[j+1])
    end
    d[N] = 1 + Œît/Œîz^2 * Œ∫[N]

    ùìõ = Tridiagonal(ld, d, ud)
    T .= ùìõ \ T

    return nothing
end

Œîz = Œî
Œît = 3600.0
K  = 1000
time_steps = Int(8day / Œît)

prob = ODEProblem(surface_flux, T‚ÇÄ, tspan, params)
integrator = init(prob, Tsit5(), adaptive=false, dt=Œît, saveat=0:Œît:Œît*time_steps)

@time begin
    for _ in 1:time_steps
        step!(integrator)
        convective_adjustment!(integrator)
    end
end

anim = @animate for n in 1:time_steps
    @info "frame $n/$time_steps"
    time_str = @sprintf("%.2f days", integrator.sol.t[n] / day)
    plot(integrator.sol[n], z, linewidth=2, xlim=(19, 20), ylim=(0, 100),
         xlabel="Temperature (¬∞C)", ylabel="Depth z (meters)",
         title="Convective adjustment: $time_str", legend=:bottomright, show=false)
end
 
mp4(anim, "convective_adjustment_implicit.mp4", fps=30)
